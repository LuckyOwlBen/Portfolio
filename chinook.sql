--SELECT ALL RECORDS FROM THE EMPLOYEE TABLE
SELECT *
FROM EMPLOYEE;
/
--SELECT ALL RECORDS FROM THE EMPLOYEE TABLE WHERE THE LAST NAME IS KING
SELECT *
FROM EMPLOYEE
WHERE LASTNAME = 'King';
/
--SELECT ALL RECORDS FROM THE EMPLOYEE TABLE WHERE THE FIRST NAME IS ANDREW AND REPORTSTO IS NULL
SELECT *
FROM EMPLOYEE 
WHERE FIRSTNAME = 'Andrew'
AND REPORTSTO IS NULL;
/
--Select all albums in Album table and sort result set in descending order by title.
SELECT *
FROM ALBUM
ORDER BY TITLE DESC;
/
-- Select first name from Customer and sort result set in ascending order by city
SELECT FIRSTNAME
FROM CUSTOMER
ORDER BY CITY ASC;
/
--Insert two new records into Genre table
INSERT INTO GENRE(genreid,name) 
VALUES(26,'Trap');
INSERT INTO GENRE(genreid,name)
VALUES(27,'LoFi');
/
-- Insert two new records into Employee table
INSERT 
INTO EMPLOYEE(EMPLOYEEID,LASTNAME,FIRSTNAME,TITLE,REPORTSTO,BIRTHDATE,HIREDATE,ADDRESS,CITY,STATE,COUNTRY,POSTALCODE,PHONE,FAX,EMAIL)
VALUES(9,'Brooks','James','Lazy',2,TO_DATE('11-11-80','DD-MM-YY'),TO_DATE('05-05-04','DD,MM,YY'),'123 whatever st','Orlando','Florida','murka',33132,'(234) 567-8908','(432) 154-2632','bobspie@yahoo.com');
INSERT 
INTO EMPLOYEE(EMPLOYEEID,LASTNAME,FIRSTNAME,TITLE,REPORTSTO,BIRTHDATE,HIREDATE,ADDRESS,CITY,STATE,COUNTRY,POSTALCODE,PHONE,FAX,EMAIL)
VALUES(10,'Dicky','Michael','Lazy',2,TO_DATE('11-11-81','DD-MM-YY'),TO_DATE('06-05-04','DD,MM,YY'),'123 whatever ln','Baton Rouge','Louisiana','murka',33131,'13033465581','(234) 567-8943','bobspie@yahoo.com');
/
--Insert two new records into Customer table
INSERT
INTO CUSTOMER(CUSTOMERID,FIRSTNAME,LASTNAME,COMPANY,ADDRESS,CITY,STATE,COUNTRY,POSTALCODE,PHONE,FAX,EMAIL,SUPPORTREPID)
VALUES(60,'Picka','Dobra',null,'123 whatever ln','ontario',null,'canadia',null,'12345234324',null,'mikeJones@awyea.com',3);
INSERT
INTO CUSTOMER(CUSTOMERID,FIRSTNAME,LASTNAME,COMPANY,ADDRESS,CITY,STATE,COUNTRY,POSTALCODE,PHONE,FAX,EMAIL,SUPPORTREPID)
VALUES(61,'icka','bra',null,'123 whatever DR','ontario',null,'canadia',null,'12345234324',null,'JAMESJones@awyea.com',4);
/
--Update Aaron Mitchell in Customer table to Robert Walter
UPDATE CUSTOMER
SET FIRSTNAME = 'Robert', LASTNAME = 'Walter'
WHERE CUSTOMERID = 32;
/
--Update name of artist in the Artist table “Creedence Clearwater Revival” to “CCR”	
UPDATE ARTIST
SET NAME = 'CCR'
WHERE ARTISTID = 76;
/
--Select all invoices with a billing address like “T%” 
SELECT *
FROM INVOICE
WHERE BILLINGADDRESS LIKE 'T%';
/
--Select all invoices that have a total between 15 and 50
SELECT *
FROM INVOICE
WHERE TOTAL > 15 AND TOTAL <50;
--Select all employees hired between 1st of June 2003 and 1st of March 2004
SELECT*
FROM EMPLOYEE
WHERE HIREDATE > '01-JUN-03' AND HIREDATE > '01-MAR-04';
/
--Delete a record in Customer table where the name is Robert Walter
ALTER TABLE INVOICE
DROP CONSTRAINT FK_INVOICECUSTOMERID;
DELETE 
FROM CUSTOMER
WHERE CUSTOMERID = 32;
/
--Create a function that returns the current time
SELECT CURRENT_TIMESTAMP
FROM dual;
/
--create a function that returns the length of name in MEDIATYPE table
SELECT LENGTH(NAME)
FROM MEDIATYPE;
/
--CREATE A FUNCTION THAT RETURNS THE AVERAGE TOTAL OF ALL INVOICES
SELECT AVG(TOTAL) 
FROM INVOICE;
/
--CREATE A FUNCTION THAT RETURNS THE MOST EXPENSIVE TRACK
SELECT MAX(UNITPRICE)
FROM TRACK;
/
--CREATE A FUNCTION THAT RETURNS THE AVERAGE PRICE OF INVOICE LINE ITEMS IN THE INVOICELINE TABLE
CREATE OR REPLACE FUNCTION AVGPRICE
RETURN NUMBER
IS 
X NUMBER;
BEGIN
    SELECT AVG(UNITPRICE)
    INTO X
    FROM INVOICELINE;
    RETURN X;
END;
/
--Create a function that returns all employees who were born after 1968.
CREATE OR REPLACE FUNCTION EMPLOYEEBIRTHAVG
RETURN SYS_REFCURSOR
IS my_cursor SYS_REFCURSOR;

BEGIN
    OPEN MY_CURSOR FOR
    SELECT LASTNAME, FIRSTNAME, BIRTHDATE
    FROM EMPLOYEE
    GROUP BY LASTNAME, FIRSTNAME, BIRTHDATE
    HAVING MIN BIRTHDATE > '12-DEC-68';
    ORDER BY BIRTHDATE;
    
    RETURN MY_CURSOR;
END;
/

DECLARE
AGE SYS_REFCURSOR;
SOME_ID EMPLOYEE.EMPLOYEEID%TYPE;
SOME_LN EMPLOYEE.LASTNAME%TYPE;
SOME_FN EMPLOYEE.FIRSTNAME%TYPE;
SOME_BD EMPLOYEE.BIRTHDATE%TYPE;
BEGIN
    AGE := EMP_AGE;
    LOOP
    FETCH AGE INTO SOME_ID, SOME_LN, SOME_FN, SOME_BD;
    EXIT WHEN AGE%NOTFOUND;
    DBMS_OUTPUT.PUT_LINE('ID: '||SOME_ID||', LASTNAME: '||SOME_LN||', FIRSTNAME: '||SOME_FN||', BIRTHDAY:'||SOME_BD);
    END LOOP;
    CLOSE AGE;
END;
/
--Create a stored procedure that selects the first and last names of all the employees
CREATE OR REPLACE PROCEDURE SP_GET_EMPNAMES (NAMES OUT SYS_REFCURSOR)
IS
BEGIN
    OPEN NAMES FOR
    SELECT FIRSTNAME, LASTNAME
    FROM EMPLOYEE;
END;
/

DECLARE
    NAMES SYS_REFCURSOR;
    SOME_FIRSTN EMPLOYEE.FIRSTNAME%TYPE;
    SOME_LASTN EMPLOYEE.LASTNAME%TYPE;
BEGIN
    SP_GET_EMPNAMES(NAMES);
    LOOP
    FETCH NAMES INTO SOME_FIRSTN, SOME_LASTN;
    EXIT WHEN NAMES%NOTFOUND;
    DBMS_OUTPUT.PUT_LINE('FIRSTNAME: '||SOME_FIRSTN||', LASTNAME: '||SOME_LASTN);
    END LOOP;
    CLOSE NAMES;
END; 
/
--Create a stored procedure that updates the personal information of an employee
CREATE OR REPLACE PROCEDURE SP_UPDATE_EMPLOYEE (EMPLOYEE_ID IN NUMBER, SOME_FN IN VARCHAR2, SOME_LN IN VARCHAR2)
IS
BEGIN
    UPDATE EMPLOYEE
    SET LASTNAME = SOME_LN, FIRSTNAME = SOME_FN
    WHERE EMPLOYEE = EMPLOYEE_ID;
    COMMIT;
END; 
/
--Create a stored procedure that returns the managers of an employee
CREATE OR REPLACE PROCEDURE SP_GET_MANAGER (EMPLOYEE_ID IN NUMBER, MANAGER_ID OUT NUMBER)
IS 
BEGIN
    SELECT REPORTSTO
    INTO MANAGER_ID
    FROM EMPLOYEE
    WHERE EMPLOYEEID = EMPLOYEE_ID;
END;
-- Create a stored procedure that returns the name and company of a customer
CREATE OR REPLACE PROCEDURE SP_GET_CUSTOMER (CUST OUT SYS_REFCURSOR)
IS
BEGIN
    OPEN CUST FOR
    SELECT FIRSTNAME, LASTNAME, COMPANY
    FROM CUSTOMER;
END;
/

DECLARE
    CUST SYS_REFCURSOR;
    SOME_FIRSTN CUSTOMER.FIRSTNAME%TYPE;
    SOME_LASTN CUSTOMER.LASTNAME%TYPE;
    SOME_COMP CUSTOMER.COMPANY%TYPE;
BEGIN
    SP_GET_CUSTOMER(CUST);
    LOOP
    FETCH CUST INTO SOME_FIRSTN, SOME_LASTN, SOME_COMP;
    EXIT WHEN CUST%NOTFOUND;
    DBMS_OUTPUT.PUT_LINE('FIRSTNAME: '||SOME_FIRSTN||', LASTNAME: '||SOME_LASTN||', COMPANY: '||SOME_COMP);
    END LOOP;
    CLOSE CUST;
END; 
/
--Create a transaction that given a invoiceId will delete that invoice 
CREATE OR REPLACE PROCEDURE DELETE_INVOICE (INV_ID IN NUMBER)
IS
BEGIN
    EXECUTE IMMEDIATE 'ALTER TABLE INVOICELINE 
    DROP CONSTRAINT FK_INVOICELINEINVOICEID';
    DELETE INVOICE WHERE INVOICEID = INV_ID;
    COMMIT; 
END;
/
--Create an after insert trigger on the employee table fired after a new record is inserted into the table
CREATE SEQUENCE SQ.EMPLOYEE_PK
START WITH 1000
INCREMENT BY 1;
/
CREATE OR REPLACE TRIGGER TR_EMPLOYEE
AFTER INSERT ON EMPLOYEE
FOR EACH ROW
BEGIN
    SELECT SQ.EMPLOYEE_PK.NEXTVAL INTO :NEW.EMPLOYEEID FROM DUAL;
END; 
/
-- Create an after update trigger on the album table that fires after a row is inserted in the table
CREATE SEQUENCE SQ_ALBUM_PK
START WITH 1000
INCREMENT BY 1;
/
CREATE OR REPLACE TRIGGER TR_ALBUM
AFTER UPDATE ON ALBUM
FOR EACH ROW
BEGIN
    SELECT SQ_ALBUM_PK.NEXTVAL INTO :NEW.ALBUMID FROM DUAL;
END;
/
--Create an after delete trigger on the customer table that fires after a row is deleted from the table.
CREATE SEQUENCE SQ_CUSTOMER_PK
START WITH 1000
INCREMENT BY 1;
/
CREATE OR REPLACE TRIGGER TR_CUSTOMER
AFTER DELETE ON CUSTOMER
FOR EACH ROW
BEGIN
    SELECT SQ_CUSTOMER_PK.NEXTVAL INTO :NEW.CUSTOMERID FROM DUAL;
END;
/
--Create an inner join that joins customers and orders and specifies the name of the customer and the invoiceId
SELECT LASTNAME, FIRSTNAME, INVOICEID 
FROM CUSTOMER 
INNER JOIN INVOICE 
ON INVOICE.CUSTOMERID = CUSTOMER.CUSTOMERID;
/
--Create an outer join that joins the customer and invoice table, specifying the CustomerId, firstname, lastname, invoiceId, and total
SELECT CUSTOMER.CUSTOMERID, FIRSTNAME, LASTNAME, INVOICEID, TOTAL
FROM CUSTOMER
LEFT OUTER JOIN INVOICE
ON INVOICE.CUSTOMERID = CUSTOMER.CUSTOMERID;
--Create a right join that joins album and artist specifying artist name and title
SELECT NAME, TITLE
FROM ARTIST 
RIGHT OUTER JOIN ALBUM
ON ALBUM.ARTISTID = ARTIST.ARTISTID;
--Create a cross join that joins album and artist and sorts by artist name in ascending order
SELECT NAME
FROM ARTIST
CROSS JOIN ALBUM
ORDER BY NAME ASC;
--Perform a self-join on the employee table, joining on the reportsto column
SELECT *
FROM EMPLOYEE A
INNER JOIN EMPLOYEE B
ON B.EMPLOYEEID = A.REPORTSTO;
commit;
exit;